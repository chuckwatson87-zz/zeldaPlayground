"use strict";
const path = require('path');
const project = require('./aurelia_project/aurelia.json');
const CLIOptions = require('aurelia-cli').CLIOptions;

const externalVendorFiles = require('./test/tdd-resources/karma-vendor-files.json');

let tdd = CLIOptions.hasFlag('source');
let coverage = CLIOptions.hasFlag('coverage');

let testSrc = [];
let files = [];
let exclude = [];
let preprocessors = {};
let proxies = {};
let babelPreprocessor = { options: mergeObject(Object.assign({}, project.transpiler.options), project.unitTestRunner.babelOptions) };

function mergeObject(original, toMerge) {
    for (let key in toMerge) {
        let value = toMerge[key];
        if (original[key]) { //If the option exists already, try and merge
            if (Array.isArray(value)) {
                original[key] = original[key].concat(value);
            } else if (typeof value == 'string') {
                //Replace
                original[key] = value;
            } else if (typeof value == 'object') {
                mergeObject(original[key], value);
            }
            else {
                original[key] = value;
            }
        } else { //Add it to the options
            original[key] = value;
        }
        return original;
    }
}

// if (coverage && babelPreprocessor.options.plugins.indexOf('istanbul') == -1) {
//     babelPreprocessor.options.plugins.push('istanbul');
// }

if (tdd) {

    testSrc = [
        //{ pattern: 'node_modules/**/*', included: false, watched: false }, //Specifically set watched to false to stop Karma from listening to node files (intensive task)


        { pattern: 'test/setup.js', included: false },

        { pattern: 'test/data/**/*.js', included: false },
        { pattern: 'test/resources/**/*.svg', included: false, watch: false },
        { pattern: 'test/NavigationInstructionStub.js', included: false },
        { pattern: 'test/RouterStub.js', included: false },

        { pattern: project.unitTestRunner.source, included: false },

        // This file is automatically generated from the `test.js` task. It is the compiled loader config used for the application
        'test/aurelia-karma.js',
    ];
    let appSrc = [
        { pattern: project.markupProcessor.source, included: false },
        "test/tdd-resources/css-modules.js",
        { pattern: project.cssProcessor.source[1], included: false },
        { pattern: "src/**/*!(.test).js", included: false}// project.transpiler.source[0], included: true },
    ];

    files = ['node_modules/requirejs/require.js', 'test/tdd-resources/karma-require-config.js'].concat(externalVendorFiles).concat(testSrc).concat(appSrc);
    //console.log(files);
    exclude = ['node_modules/**/*.{test,Test,spec,Spec}.js']; // Node modules sometimes publish their test files, we want to exclude any test file that might be caught up in our tests
    preprocessors = {
        //[project.unitTestRunner.source]: [project.transpiler.id], //Test files are already under the src folder
        [project.transpiler.source[0]]: [project.transpiler.id], //Since we are now including source code, we need babel to transpile our source files on the fly
        ['test/setup.js']: [project.transpiler.id],
        ['test/NavigationInstructionStub.js']: [project.transpiler.id],
        ['test/RouterStub.js']: [project.transpiler.id],
        ['test/data/**/*.js']: [project.transpiler.id]
    };

    proxies = {
        '/src/': '/base/src/'
    };

} else {

    testSrc = [
      { pattern: 'test/data/**/*.js', included: false },
      { pattern: 'test/resources/**/*.svg', included: false, watch: false },
      { pattern: 'src/resources/**/*.svg', included: false, watch: false },
      { pattern: 'test/NavigationInstructionStub.js', included: false },
      { pattern: 'test/RouterStub.js', included: false },
      { pattern: project.unitTestRunner.source, included: false }, //"source": "src/**/*.spec.js" // "source": "test/unit/**/*.js"
      { pattern: 'test/setup.js', included: false },
      { pattern: 'wwwroot/dist/**/*.map', included: false },
      'test/aurelia-karma.js'
    ];

    let output = project.platform.output;
    let appSrc = project.build.bundles.map(x => path.join(output, x.name));
    let entryIndex = appSrc.indexOf(path.join(output, project.build.loader.configTarget));
    let entryBundle = appSrc.splice(entryIndex, 1)[0];
    //let aureliaIndex = appSrc.indexOf(path.join(output, project.build.loader.aureliaTarget));
    //let aureliaBundle = appSrc.splice(entryIndex, 1)[0];
    files = [entryBundle].concat(testSrc).concat(appSrc);

    preprocessors = {
          [project.unitTestRunner.source]: [project.transpiler.id], //"source": "src/**/*.spec.js" // "source": "test/unit/**/*.js"
          ['test/setup.js']: [project.transpiler.id],
          ['test/NavigationInstructionStub.js']: [project.transpiler.id],
          ['test/RouterStub.js']: [project.transpiler.id],
          ['test/data/**/*.js']: [project.transpiler.id]
    };
    proxies = {
        '/dist/': '/base/wwwroot/dist/'
    };
}

module.exports = function(config) {
    config.set({
        basePath: '',
        frameworks: ['jasmine-jquery', project.testFramework.id, 'jasmine-matchers'],
        files: files,
        exclude: exclude,
        preprocessors: preprocessors,
        'babelPreprocessor': babelPreprocessor,
        proxies: proxies,
        reporters: ['progress'],
        port: 9876,
        waitSeconds: 0,
        colors: true,
        logLevel: config.LOG_INFO,
        autoWatch: true,
        browsers: ['Chrome'],
        singleRun: false
    });
};



//// Karma configuration
//// Generated on Tue Oct 13 2015 10:36:06 GMT-0400 (Eastern Daylight Time)

//var compilerOptions = require('./build/babel-options').karma();
//var assign = Object.assign || require('object.assign');

//module.exports = function (config) {
//    config.set({

//        // base path that will be used to resolve all patterns (eg. files, exclude)
//        basePath: '',

//        // frameworks to use
//        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
//        frameworks: ['jspm', 'jasmine-jquery', 'jasmine', 'jasmine-matchers'],

//        jspm: {
//            config: 'wwwroot/config.js',
//            packages: '/wwwroot/jspm_packages/',
//            loadFiles: [
//              'test/test-main-karma.js',
//              'src/**/*.test.js'

//            ],
//            serveFiles: [
//              'src/**/*!(.test).js',

//              'src/**/*.html',
//              'src/**/*.css',
//              'src/**/*.svg',
//              'test/**/*.js',
//              'test/**/*.svg'
//            ],
//            paths: {
//                "*": "*",
//                'testData/*': 'test/data/*',
//                'github:*': 'jspm_packages/github/*',
//                'npm:*': 'jspm_packages/npm/*',

//                //TODO: Not ideal to have to set each path, but necessary to get it to work for now.
//                'api/*': 'src/api/*',
//                'about/*': 'src/about/*',
//                'bindings/*': 'src/bindings/*',
//                'cache/*': 'src/cache/*',
//                'common/*': 'src/common/*',
//                'flow/*': 'src/flow/*',
//                'form/*': 'src/form/*',
//                'models/*': 'src/models/*',
//                'resources/*': 'src/resources/*',
//                'routeConfigs/*': 'src/routeConfigs/*',
//                'selfService/*': 'src/selfService/*',
//                'utils/*': 'src/utils/*',
//                'workspace/*': 'src/workspace/*',
//                'AddressBook': 'src/AddressBook.js'
//            }
//        },
//        proxies: {
//            '/src/': '/base/src/',
//            '/test/': '/base/test/',
//            '/jspm_packages/': '/base/wwwroot/jspm_packages/'
//        },

//        // list of files / patterns to load in the browser
//        files: [
//        ],

//        // list of files to exclude
//        exclude: [
//        ],

//        // preprocess matching files before serving them to the browser
//        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
//        //  'babelPreprocessor': {
//        //      options: compilerOptions
//        //  },
//        'babelPreprocessor': {
//            options: compilerOptions
//        },
//        // test results reporter to use
//        // possible values: 'dots', 'progress'
//        // available reporters: https://npmjs.org/browse/keyword/karma-reporter
//        reporters: ['progress'],

//        // web server port
//        port: 9876,

//        // enable / disable colors in the output (reporters and logs)
//        colors: true,

//        // level of logging
//        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
//        logLevel: config.LOG_INFO,

//        // enable / disable watching file and executing tests whenever any file changes
//        autoWatch: true,

//        // start these browsers
//        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
//        browsers: ['Chrome'],

//        // Continuous Integration mode
//        // if true, Karma captures browsers, runs the tests and exits
//        singleRun: false
//    })
//}
